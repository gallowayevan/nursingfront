{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "CardRadio.svelte",
    "DifferenceToolTipTable.svelte",
    "InfoBox.svelte",
    "IntroBlock.svelte",
    "LineChart.svelte",
    "LineChartDifference2.svelte",
    "LineLegend.svelte",
    "MapTable.svelte",
    "RowChart.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import { createEventDispatcher } from \"svelte\";\r\n\r\n    import InfoBox from \"./InfoBox.svelte\";\r\n    const dispatch = createEventDispatcher();\r\n\r\n    export let calculation = undefined;\r\n    export let options = undefined;\r\n    export let groupLabel = undefined;\r\n\r\n    function tabKeydown(e) {\r\n        if (e.key === \"ArrowLeft\" || e.key === \"ArrowRight\") {\r\n            const currentIndex = +e.target.getAttribute(\"data-index\");\r\n            const moveIndex = e.key === \"ArrowLeft\" ? -1 : 1;\r\n            let newIndex = currentIndex + moveIndex;\r\n\r\n            if (newIndex >= options.length) {\r\n                //If newIndex is too far right, circle to front\r\n                newIndex = 0;\r\n            } else if (newIndex < 0) {\r\n                //If newIndex is too far left, circle to end\r\n                newIndex = options.length - 1;\r\n            }\r\n            document.getElementById(options[newIndex].name).focus();\r\n            dispatch(\"calculationClicked\", options[newIndex].name);\r\n        }\r\n    }\r\n</script>\r\n\r\n<div\r\n    class=\"columns\"\r\n    role=\"radiogroup\"\r\n    aria-label={groupLabel}\r\n    style=\"margin-bottom: 2rem;\"\r\n>\r\n    {#each options as { name, title, subtitle, info }, index}\r\n        <div\r\n            class=\"card column\"\r\n            class:has-background-primary={name === calculation}\r\n            class:has-text-white={name === calculation}\r\n            id={name}\r\n            role=\"radio\"\r\n            data-index={index}\r\n            aria-checked={name === calculation}\r\n            tabindex={name === calculation ? 0 : -1}\r\n            aria-labelledby={`${name}-card-radio-title ${name}-card-radio-subtitle`}\r\n            on:click={() => dispatch(\"calculationClicked\", name)}\r\n            on:keydown={tabKeydown}\r\n        >\r\n            <div class=\"card-content\">\r\n                <p class=\"is-size-3\" id={name + \"-card-radio-title\"}>{title}</p>\r\n                <p class=\"is-size-4\" id={name + \"-card-radio-subtitle\"}>\r\n                    {subtitle}\r\n                </p>\r\n            </div>\r\n            <div class=\"is-pulled-right\">\r\n                <InfoBox {title} {info} invert={name === calculation} />\r\n            </div>\r\n        </div>\r\n    {/each}\r\n</div>\r\n\r\n<style>\r\n    .card {\r\n        transition: box-shadow 0.3s;\r\n    }\r\n\r\n    .card:hover {\r\n        box-shadow: 0 0 11px rgba(70, 93, 128, 0.7);\r\n        z-index: 100;\r\n    }\r\n\r\n    .card:focus {\r\n        outline-width: 1px;\r\n        outline-style: dashed;\r\n        outline-color: #465d80;\r\n    }\r\n</style>\r\n",
    "<script>\r\n  import { numberFormat } from \"./utilities.js\";\r\n\r\n  export let rows;\r\n</script>\r\n\r\n<div class=\"table-container\">\r\n  <table class=\"table is-narrow\">\r\n    <thead>\r\n      <tr>\r\n        <th style=\"text-align:right;\">Supply</th>\r\n        <th style=\"text-align:right;\">Demand</th>\r\n        <th style=\"text-align:right;\">Difference</th>\r\n        <th style=\"text-align:right;\">%</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {#each rows as { supplyMean, demandMean, value, color, rateOrTotal, percentage, difference }}\r\n        <tr>\r\n          <td style=\"color:{color}; text-align:right;\">\r\n            {numberFormat(rateOrTotal)(supplyMean)}\r\n          </td>\r\n          <td style=\"color:{color}; text-align:right;\">\r\n            {numberFormat(rateOrTotal)(demandMean)}\r\n          </td>\r\n          <td style=\"color:{color}; text-align:right;\">\r\n            {numberFormat(rateOrTotal)(\r\n              difference === undefined ? value : difference\r\n            )}\r\n          </td>\r\n          <td style=\"color:{color}; text-align:right;\">\r\n            {(percentage === undefined ? value : percentage).toLocaleString(\r\n              undefined,\r\n              {\r\n                style: \"percent\",\r\n                maximumFractionDigits: 1,\r\n              }\r\n            )}\r\n          </td>\r\n        </tr>\r\n      {/each}\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<style>\r\n  td {\r\n    text-align: right;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import { tick } from \"svelte\";\r\n  import { fade } from \"svelte/transition\";\r\n  export let title = \"Title\";\r\n  export let info = \"Information\";\r\n  export let invert = false;\r\n  let active = false;\r\n\r\n  //santize titles for use as html ids:\r\n  //https://stackoverflow.com/questions/9635625/javascript-regex-to-remove-illegal-characters-from-dom-id/9635698\r\n  const id = `${title\r\n    .toLowerCase()\r\n    .replace(/^[^a-z]+|[^\\w:.-]+/gi, \"-\")}-info-box`;\r\n\r\n  function windowClicked(e) {\r\n    const classList = Array.from(e.target.classList);\r\n    if (!classList.includes(\"close-on-window-click\") & active) {\r\n      active = false;\r\n    }\r\n  }\r\n\r\n  function onKeyDownClose(e) {\r\n    if (e.key === \"Escape\") active = false;\r\n  }\r\n\r\n  async function onKeyDown(e) {\r\n    if (e.key === \"Enter\") {\r\n      active = true;\r\n      await tick();\r\n      document.getElementById(id).focus();\r\n    }\r\n    if (e.key === \"Escape\") active = false;\r\n  }\r\n\r\n  async function handleIconClick() {\r\n    active = true;\r\n    await tick();\r\n    document.getElementById(id).focus(); //Does not seem to do anything?\r\n  }\r\n</script>\r\n\r\n<svelte:window on:click|stopPropagation={windowClicked} />\r\n<div class=\"info-icon-wrapper \">\r\n  <svg\r\n    tabindex=\"0\"\r\n    class=\"icon-svg has-fill-primary\"\r\n    on:click|stopPropagation={handleIconClick}\r\n    on:keydown|stopPropagation={onKeyDown}\r\n    role=\"button\"\r\n  >\r\n    <title>Select to get more information about this option.</title>\r\n    <use xlink:href=\"#fa-info-circle\" class:has-fill-white={invert} />\r\n  </svg>\r\n  {#if active}\r\n    <article\r\n      {id}\r\n      on:keydown={onKeyDownClose}\r\n      class=\"message is-small is-primary close-on-window-click\"\r\n      tabindex=\"0\"\r\n      transition:fade\r\n    >\r\n      <div class=\"message-header close-on-window-click\">\r\n        <p>{title}</p>\r\n        <button\r\n          class=\"delete\"\r\n          aria-label=\"close\"\r\n          on:click|stopPropagation|preventDefault={() => (active = false)}\r\n          on:keydown|stopPropagation={(e) => {\r\n            if (e.key === \"Enter\") active = false;\r\n          }}\r\n        />\r\n      </div>\r\n      <div class=\"message-body close-on-window-click\">{info}</div>\r\n    </article>\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  .info-icon-wrapper {\r\n    display: inline-flex;\r\n  }\r\n\r\n  article:focus {\r\n    outline-width: 2px;\r\n  }\r\n\r\n  article {\r\n    left: 0px;\r\n    width: 300px;\r\n    position: absolute;\r\n    z-index: 100;\r\n  }\r\n\r\n  .icon-svg {\r\n    width: 16px;\r\n    height: 16px;\r\n  }\r\n\r\n  .has-fill-white {\r\n    fill: #ffffff;\r\n  }\r\n\r\n  .message {\r\n    box-shadow: 0 0 11px rgba(51, 51, 51, 0.7);\r\n    z-index: 100;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import { createEventDispatcher } from \"svelte\";\r\n\r\n  const dispatch = createEventDispatcher();\r\n\r\n  export let chartType;\r\n  export let calculation;\r\n\r\n  function handleLaunchTutorial() {\r\n    dispatch(\"launchTutorial\");\r\n  }\r\n</script>\r\n\r\n<div class=\"content has-background-light\">\r\n  {#if chartType == \"line\"}\r\n    <h2>You can create a line chart.</h2>\r\n    <p>\r\n      <span class=\"has-text-weight-semibold\">\r\n        If you are using the line chart option,\r\n      </span>\r\n      you can display multiple lines at once to compare. Just change your options\r\n      and select\r\n      <span class=\"has-text-weight-semibold\">Show</span>\r\n      again. To remove a line, hit the\r\n      <span class=\"has-text-weight-semibold\">X</span>\r\n      button in the top left of its corresponding box. Once you have displayed the\r\n      projections* in which you are interested, you can download the image (as a\r\n      .png) or the data (as a .csv file).\r\n    </p>\r\n    {#if calculation === \"difference\"}\r\n      <img\r\n        class=\"image\"\r\n        alt=\"How to use the line chart the shows the numerical difference in supply and demand.\"\r\n        src=\"public/images/tutorial/supply-demand-instruction.png\"\r\n      />\r\n    {:else if calculation === \"percentage\"}\r\n      <img\r\n        class=\"image\"\r\n        alt=\"How to use the line chart the shows the percentage difference in supply and demand.\"\r\n        src=\"public/images/tutorial/percentage_supply_demand_instruction.png\"\r\n      />\r\n    {:else if calculation === \"supply\"}\r\n      <img\r\n        class=\"image\"\r\n        alt=\"How to use the line chart the shows supply projections and uncertainty for those projections.\"\r\n        src=\"public/images/tutorial/supply_instruction.png\"\r\n      />\r\n    {:else if calculation === \"demand\"}\r\n      <img\r\n        class=\"image\"\r\n        alt=\"How to use the line chart the shows the demand projections.\"\r\n        src=\"public/images/tutorial/demand_instruction.png\"\r\n      />\r\n    {/if}\r\n    <hr />\r\n    <p>\r\n      <span class=\"has-text-weight-semibold\">Please note:</span>\r\n      the model wonâ€™t allow you to display the projections for specific education\r\n      categories combined with specific settings at the same time. For instance,\r\n      the projection for RN, with BS for education, and hospital for setting is not\r\n      available. This is because the numbers are small.\r\n    </p>\r\n  {:else if chartType == \"map\"}\r\n    <h2>You can create a map.</h2>\r\n    <p>\r\n      <span class=\"has-text-weight-semibold\">\r\n        You can also view projections as a map.\r\n      </span>\r\n      Use the slider below the map to change the year of data. The row chart displays\r\n      the projected values for the selected year. The colors in the map also indicate\r\n      the projected value. You can see the projected values in the table at the bottom.\r\n      Hovering over any chart/map/table element highlights the same geography in\r\n      the other elements.\r\n    </p>\r\n    <img\r\n      class=\"image\"\r\n      alt=\"How to use the map.\"\r\n      src=\"public/images/tutorial/map_instructions.png\"\r\n    />\r\n  {:else if chartType == \"table\"}\r\n    <h2>You can create a table.</h2>\r\n    <p>\r\n      <span class=\"has-text-weight-semibold\">\r\n        You can also view projections in a table.\r\n      </span>\r\n      The colors represent the change relative to the baseline (the first year, in\r\n      this case, 2008).\r\n      <span style=\"color:red;\">Red</span>\r\n      indicates a decrease from the baseline.\r\n      <span style=\"color:blue;\">Blue</span>\r\n      indicates an increase from the baseline. The table can be downloaded as a CSV\r\n      file.\r\n    </p>\r\n    <img\r\n      class=\"image\"\r\n      alt=\"How to use the table.\"\r\n      src=\"public/images/tutorial/06_table.png\"\r\n    />\r\n  {:else}\r\n    <h2 class=\"subtitle is-size-5 has-text-grey-dark\">\r\n      Select a chart type and projection options, or launch our tutorial to\r\n      learn more!\r\n      <button\r\n        class=\"button is-primary is-outlined is-center is-rounded\"\r\n        id=\"btn\"\r\n        on:click={handleLaunchTutorial}\r\n      >\r\n        Launch User Guide\r\n      </button>\r\n    </h2>\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  div {\r\n    height: 100%;\r\n    padding: 1rem;\r\n    border-radius: 6px;\r\n  }\r\n\r\n  img {\r\n    max-height: 500px;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import Line from \"./Line.svelte\";\r\n  import LineChartLegendTable from \"./LineChartLegendTable.svelte\";\r\n  import DifferenceToolTipTable from \"./DifferenceToolTipTable.svelte\";\r\n  import { scaleLinear } from \"d3-scale\";\r\n  import { extent, max, group, mean, descending } from \"d3-array\";\r\n  import { line as d3line, area as d3area, curveMonotoneX } from \"d3-shape\";\r\n  import XTick from \"./XTick.svelte\";\r\n  import YTick from \"./YTick.svelte\";\r\n  import { fade } from \"svelte/transition\";\r\n  import \"array-flat-polyfill\";\r\n  import { numberFormat } from \"./utilities.js\";\r\n\r\n  export let data;\r\n  // export let projectionStartYear;\r\n  export let calculation;\r\n\r\n  const width = 800;\r\n  const height = 475;\r\n  const margin = { top: 20, right: 60, bottom: 65, left: 90 };\r\n\r\n  const colors = [\r\n    \"rgb(31, 119, 180)\",\r\n    \"rgb(255, 127, 14)\",\r\n    \"rgb(44, 160, 44)\",\r\n    \"rgb(214, 39, 40)\",\r\n    \"rgb(148, 103, 189)\",\r\n    \"rgb(140, 86, 75)\",\r\n    \"rgb(227, 119, 194)\",\r\n    \"rgb(127, 127, 127)\",\r\n    \"rgb(188, 189, 34)\",\r\n    \"rgb(23, 190, 207)\",\r\n    \"rgb(174, 199, 232)\",\r\n    \"rgb(255, 187, 120)\",\r\n    \"rgb(152, 223, 138)\",\r\n    \"rgb(255, 152, 150)\",\r\n    \"rgb(197, 176, 213)\",\r\n    \"rgb(196, 156, 148)\",\r\n    \"rgb(247, 182, 210)\",\r\n    \"rgb(199, 199, 199)\",\r\n    \"rgb(219, 219, 141)\",\r\n    \"rgb(158, 218, 229)\",\r\n  ];\r\n\r\n  let colorMap = new Map();\r\n\r\n  //Could this be cleaner?\r\n  $: {\r\n    //Remove unused colors\r\n    colorMap.forEach(function (value, key) {\r\n      if (!data.map((d) => d.id).includes(+key)) {\r\n        colorMap.delete(key);\r\n      }\r\n    });\r\n\r\n    //Assign color to new data\r\n    data.forEach(function (d) {\r\n      if (!colorMap.has(d.id)) {\r\n        const availableColors = colors.filter(\r\n          (d) => !Array.from(colorMap.values()).includes(d)\r\n        );\r\n        colorMap.set(d.id, availableColors[0]);\r\n      }\r\n    });\r\n  }\r\n\r\n  const transitionDuration = 400;\r\n\r\n  //Shape generators\r\n  $: line = d3line()\r\n    .curve(curveMonotoneX)\r\n    .defined((d) => !isNaN(d.value))\r\n    .x((d) => x(d.year))\r\n    .y((d) => y(d.value));\r\n\r\n  $: area = d3area()\r\n    .x((d) => x(d.year))\r\n    .y0((d) => y(d.uci))\r\n    .y1((d) => y(d.lci))\r\n    .curve(curveMonotoneX);\r\n  $: console.log(flatData);\r\n  //Scale\r\n  $: flatData = data\r\n    .map((d) =>\r\n      d.values.map((e) =>\r\n        Object.assign(\r\n          {\r\n            id: d.id,\r\n            rateOrTotal: d.params.find((d) => d[0] == \"rateOrTotal\")[1],\r\n            color: colorMap.get(d.id),\r\n          },\r\n          e\r\n        )\r\n      )\r\n    )\r\n    .flat();\r\n  $: byYearData = group(flatData, (d) => d.year);\r\n  $: xExtent =\r\n    flatData.length > 0 ? extent(flatData, (d) => d.year) : [2015, 2032];\r\n  $: xHalfway = Math.round((xExtent[1] - xExtent[0]) / 2 + xExtent[0]);\r\n  $: yExtent = flatData.length > 0 ? extent(flatData, (d) => d.value) : [0, 50];\r\n  $: x = scaleLinear()\r\n    .domain(xExtent)\r\n    .range([margin.left, width - margin.right]);\r\n  $: xTicks = x.ticks();\r\n  $: y = scaleLinear()\r\n    .domain([yExtent[0] >= 0 ? 0 : yExtent[0], yExtent[1]])\r\n    .nice()\r\n    .range([height - margin.bottom, margin.top]);\r\n  $: yTicks = y.ticks();\r\n  $: yFormat = (val) =>\r\n    calculation === \"percentage\"\r\n      ? val.toLocaleString(undefined, {\r\n          style: \"percent\",\r\n          signDisplay: \"exceptZero\",\r\n          maximumFractionDigits: 2,\r\n        })\r\n      : val.toLocaleString();\r\n\r\n  let hoverData;\r\n  let lineChartPosition = [];\r\n  function handleHover(e) {\r\n    const { clientY } = e;\r\n    let hoverYear = Math.round(x.invert(getContainerCoords(this, e)[0]));\r\n    const boundingRect = e.target.getBoundingClientRect();\r\n    const scaling = boundingRect.width / width;\r\n    lineChartPosition = {\r\n      left: boundingRect.left,\r\n      top: boundingRect.top,\r\n      scaling: scaling,\r\n      clientY,\r\n    };\r\n    if (hoverYear < xExtent[0]) {\r\n      hoverYear = xExtent[0];\r\n    } else if (hoverYear > xExtent[1]) {\r\n      hoverYear = xExtent[1];\r\n    }\r\n    hoverData = {\r\n      year: hoverYear,\r\n      values: byYearData.get(hoverYear).sort(function (a, b) {\r\n        return descending(a.value, b.value);\r\n      }),\r\n    };\r\n  }\r\n\r\n  function handleMouseLeave() {\r\n    hoverData = undefined;\r\n  }\r\n\r\n  function getContainerCoords(node, event) {\r\n    //From d3\r\n    //https://github.com/d3/d3-selection/blob/master/src/point.js\r\n\r\n    var svg = node.ownerSVGElement || node;\r\n\r\n    if (svg.createSVGPoint) {\r\n      var point = svg.createSVGPoint();\r\n      (point.x = event.clientX), (point.y = event.clientY);\r\n      point = point.matrixTransform(node.getScreenCTM().inverse());\r\n      return [point.x, point.y];\r\n    }\r\n\r\n    var rect = node.getBoundingClientRect();\r\n    return [\r\n      event.clientX - rect.left - node.clientLeft,\r\n      event.clientY - rect.top - node.clientTop,\r\n    ];\r\n  }\r\n</script>\r\n\r\n<div id=\"line-chart-div\">\r\n  {#if data.length > 0}\r\n    <h1 class=\"title\">\r\n      Projection of Nurse Workforce, {calculation == \"percentage\"\r\n        ? \"% Surplus or Shortage\"\r\n        : calculation.slice(0, 1).toUpperCase() + calculation.slice(1)}\r\n    </h1>\r\n    <h2 class=\"subtitle\">North Carolina, {xExtent[0]} - {xExtent[1]}</h2>\r\n    <svg id=\"line-chart-svg\" viewBox=\"0 0 {width} {height}\">\r\n      <g class=\"chart-container\">\r\n        <!-- <rect\r\n          width={width - margin.right - x(projectionStartYear - 1)}\r\n          x={x(projectionStartYear - 1)}\r\n          y={margin.top}\r\n          height={height - margin.bottom - margin.top}\r\n          fill=\"#ececec\" />\r\n        <text\r\n          class=\"is-size-5\"\r\n          transform=\"translate({x(projectionStartYear - 1)},{margin.top - 5})\">\r\n          Projected\r\n        </text> -->\r\n        <g\r\n          class=\"xAxis is-size-6\"\r\n          transform=\"translate(0,{height - margin.bottom})\"\r\n        >\r\n          {#each xTicks as tick (tick)}\r\n            <XTick\r\n              position={[x(tick), 0]}\r\n              value={tick}\r\n              duration={transitionDuration}\r\n            />\r\n          {/each}\r\n        </g>\r\n        <g class=\"yAxis is-size-6\" transform=\"translate({margin.left},0)\">\r\n          {#each yTicks as tick (tick)}\r\n            <YTick\r\n              {y}\r\n              value={tick}\r\n              duration={transitionDuration}\r\n              chartWidth={width - margin.right - margin.left}\r\n              format={yFormat}\r\n            />\r\n          {/each}\r\n        </g>\r\n        {#each data as lineElement (lineElement.id)}\r\n          <Line\r\n            areaPath={area(lineElement.values)}\r\n            linePath={line(lineElement.values)}\r\n            color={colorMap.get(lineElement.id)}\r\n            duration={transitionDuration}\r\n          />\r\n        {/each}\r\n        <text\r\n          class=\"is-size-5\"\r\n          transform=\"translate({margin.left - 70},{height / 1.5}) rotate(270)\"\r\n        >\r\n          Nurse FTE or Head Count\r\n        </text>\r\n        <text\r\n          class=\"is-size-5\"\r\n          text-anchor=\"middle\"\r\n          transform=\"translate({(width - margin.left - margin.right) / 2 +\r\n            margin.left},{height - 10})\"\r\n        >\r\n          Year\r\n        </text>\r\n        {#if hoverData && data.length > 0}\r\n          <line\r\n            x1={x(hoverData.year)}\r\n            x2={x(hoverData.year)}\r\n            y1={margin.top}\r\n            y2={height - margin.bottom}\r\n            stroke=\"#333\"\r\n            stroke-width=\"2\"\r\n          />\r\n          {#each hoverData.values as row}\r\n            <g transform=\"translate({x(hoverData.year)} {y(row.value)})\">\r\n              <circle cx=\"0\" cy=\"0\" r=\"5\" stroke=\"#333\" fill=\"none\" />\r\n            </g>\r\n          {/each}\r\n        {/if}\r\n        <rect\r\n          {width}\r\n          {height}\r\n          fill=\"none\"\r\n          on:mousemove={handleHover}\r\n          on:mouseleave={handleMouseLeave}\r\n          style=\"pointer-events:all;\"\r\n        />\r\n      </g>\r\n    </svg>\r\n    {#if hoverData}\r\n      {#if calculation === \"percentage\"}\r\n        <div\r\n          class=\"tooltip\"\r\n          style=\"position:fixed; top:{lineChartPosition.clientY}px; left:{hoverData.year <\r\n          xHalfway\r\n            ? lineChartPosition.left +\r\n              lineChartPosition.scaling * x(hoverData.year) +\r\n              8\r\n            : lineChartPosition.left +\r\n              lineChartPosition.scaling * x(hoverData.year) -\r\n              318}px;\r\n      background: rgba(255, 255, 255, 0.9); border-radius:5px;border: 1px\r\n      solid #333333;padding:3px\r\n      3px;z-index:200;font-weight:600;width:310px;pointer-events:none;\"\r\n        >\r\n          <DifferenceToolTipTable rows={hoverData.values} />\r\n        </div>\r\n      {:else}\r\n        <div\r\n          style=\"position:fixed; top:{lineChartPosition.clientY}px; left:{lineChartPosition.left +\r\n            lineChartPosition.scaling * (x(hoverData.year) + 8)}px;\r\n        background: rgba(255, 255, 255, 0.9); border-radius:5px;border: 1px\r\n        solid #333333;padding:3px\r\n        3px;z-index:200;font-weight:600;pointer-events:none;\"\r\n        >\r\n          <div class=\"table-container\">\r\n            <table class=\"table is-narrow\">\r\n              <thead>\r\n                <tr>\r\n                  <th>{hoverData.year}</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {#each hoverData.values as row}\r\n                  <tr>\r\n                    <td style=\"color:{colorMap.get(row.id)}; text-align:right;\">\r\n                      {numberFormat(row.rateOrTotal)(row.value)}\r\n                    </td>\r\n                  </tr>\r\n                {/each}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      {/if}\r\n    {/if}\r\n  {:else}\r\n    <div class=\"notification\">Select model options and click \"Show\".</div>\r\n  {/if}\r\n  <LineChartLegendTable\r\n    on:deleteProjection\r\n    legendData={data.map((d, i) => ({\r\n      params: d.params,\r\n      color: colorMap.get(d.id),\r\n      id: d.id,\r\n    }))}\r\n  />\r\n</div>\r\n\r\n<style>\r\n  .xAxis {\r\n    text-anchor: middle;\r\n  }\r\n\r\n  .yAxis {\r\n    text-anchor: end;\r\n  }\r\n\r\n  text {\r\n    /* has-text-grey-dark */\r\n    fill: hsl(0, 0%, 29%);\r\n  }\r\n</style>\r\n",
    "<script>\r\n    import Line from \"./Line.svelte\";\r\n    import LineChartLegendTable from \"./LineChartLegendTable.svelte\";\r\n    import { scaleLinear } from \"d3-scale\";\r\n    import { extent, max, group, descending, mean } from \"d3-array\";\r\n    import { line as d3line, area as d3area, curveMonotoneX } from \"d3-shape\";\r\n    import XTick from \"./XTick.svelte\";\r\n    import YTick from \"./YTick.svelte\";\r\n    import { fade } from \"svelte/transition\";\r\n    import \"array-flat-polyfill\";\r\n    import DifferenceToolTipTable from \"./DifferenceToolTipTable.svelte\";\r\n    import LineLegend from \"./LineLegend.svelte\";\r\n\r\n    export let data;\r\n    // export let projectionStartYear;\r\n\r\n    const width = 800;\r\n    const height = 475;\r\n    const margin = { top: 30, right: 60, bottom: 65, left: 90 };\r\n    const colors = [\r\n        \"rgb(31, 119, 180)\",\r\n        \"rgb(255, 127, 14)\",\r\n        \"rgb(44, 160, 44)\",\r\n        \"rgb(214, 39, 40)\",\r\n        \"rgb(148, 103, 189)\",\r\n        \"rgb(140, 86, 75)\",\r\n        \"rgb(227, 119, 194)\",\r\n        \"rgb(127, 127, 127)\",\r\n        \"rgb(188, 189, 34)\",\r\n        \"rgb(23, 190, 207)\",\r\n        \"rgb(174, 199, 232)\",\r\n        \"rgb(255, 187, 120)\",\r\n        \"rgb(152, 223, 138)\",\r\n        \"rgb(255, 152, 150)\",\r\n        \"rgb(197, 176, 213)\",\r\n        \"rgb(196, 156, 148)\",\r\n        \"rgb(247, 182, 210)\",\r\n        \"rgb(199, 199, 199)\",\r\n        \"rgb(219, 219, 141)\",\r\n        \"rgb(158, 218, 229)\",\r\n    ];\r\n\r\n    let colorMap = new Map();\r\n\r\n    //Could this be cleaner?\r\n    $: {\r\n        //Remove unused colors\r\n        colorMap.forEach(function (value, key) {\r\n            if (!data.map((d) => d.id).includes(+key)) {\r\n                colorMap.delete(key);\r\n            }\r\n        });\r\n\r\n        //Assign color to new data\r\n        data.forEach(function (d) {\r\n            if (!colorMap.has(d.id)) {\r\n                const availableColors = colors.filter(\r\n                    (d) => !Array.from(colorMap.values()).includes(d)\r\n                );\r\n                colorMap.set(d.id, availableColors[0]);\r\n            }\r\n        });\r\n    }\r\n\r\n    //Setting for actual line elements\r\n    const transitionDuration = 400;\r\n    const dashArray = \"4\";\r\n    const strokeWidth = 2;\r\n    const curve = curveMonotoneX;\r\n\r\n    //Shape generators\r\n    $: line = d3line()\r\n        .curve(curve)\r\n        .defined((d) => !isNaN(d.value))\r\n        .x((d) => x(d.year))\r\n        .y((d) => y(d.value));\r\n\r\n    $: area = d3area()\r\n        .curve(curve)\r\n        .x((d) => x(d.year))\r\n        .y0((d) => y(d.supplyMean))\r\n        .y1((d) => y(d.demandMean));\r\n\r\n    //clipAbove and clipBelow generators\r\n    //Then use clip component to create clipPaths and\r\n    //https://observablehq.com/@d3/difference-chart\r\n\r\n    $: flatData = data\r\n        .map((d) =>\r\n            d.values.map((e) =>\r\n                Object.assign(\r\n                    {\r\n                        id: d.id,\r\n                        rateOrTotal: d.params.find(\r\n                            (d) => d[0] == \"rateOrTotal\"\r\n                        )[1],\r\n                        color: colorMap.get(d.id),\r\n                    },\r\n                    e\r\n                )\r\n            )\r\n        )\r\n        .flat();\r\n    $: byYearData = group(flatData, (d) => d.year);\r\n    $: xExtent =\r\n        flatData.length > 0 ? extent(flatData, (d) => d.year) : [2015, 2032];\r\n    $: xHalfway = Math.round((xExtent[1] + xExtent[0]) / 2);\r\n    $: yMax =\r\n        flatData.length > 0\r\n            ? max(flatData.flatMap((d) => [d.supplyMean, d.demandMean]))\r\n            : 50;\r\n    $: x = scaleLinear()\r\n        .domain(xExtent)\r\n        .range([margin.left, width - margin.right]);\r\n    $: xTicks = x.ticks();\r\n    $: y = scaleLinear()\r\n        .domain([0, yMax])\r\n        .nice()\r\n        .range([height - margin.bottom, margin.top]);\r\n    $: yTicks = y.ticks();\r\n\r\n    let lineChartPosition = [];\r\n    let hoverData;\r\n    function handleHover(e) {\r\n        const { clientY } = e;\r\n        let hoverYear = Math.round(x.invert(getContainerCoords(this, e)[0]));\r\n        const boundingRect = e.target.getBoundingClientRect();\r\n        const scaling = boundingRect.width / width;\r\n        lineChartPosition = {\r\n            left: boundingRect.left,\r\n            right: boundingRect.right,\r\n            top: boundingRect.top,\r\n            scaling: scaling,\r\n            clientY,\r\n        };\r\n        if (hoverYear < xExtent[0]) {\r\n            hoverYear = xExtent[0];\r\n        } else if (hoverYear > xExtent[1]) {\r\n            hoverYear = xExtent[1];\r\n        }\r\n        hoverData = {\r\n            year: hoverYear,\r\n            values: byYearData.get(hoverYear).sort(function (a, b) {\r\n                return descending(\r\n                    mean([a.supplyMean, a.demandMean]),\r\n                    mean([b.supplyMean, b.demandMean])\r\n                );\r\n            }),\r\n        };\r\n    }\r\n\r\n    function handleMouseLeave() {\r\n        hoverData = undefined;\r\n    }\r\n\r\n    function addExtentToValues(values) {\r\n        const [min, max] = extent(\r\n            values.flatMap((d) => [d.supplyMean, d.demandMean])\r\n        );\r\n        return values.map((d) => Object.assign({ min, max }, d));\r\n    }\r\n\r\n    function getContainerCoords(node, event) {\r\n        //From d3\r\n        //https://github.com/d3/d3-selection/blob/master/src/point.js\r\n\r\n        var svg = node.ownerSVGElement || node;\r\n\r\n        if (svg.createSVGPoint) {\r\n            var point = svg.createSVGPoint();\r\n            (point.x = event.clientX), (point.y = event.clientY);\r\n            point = point.matrixTransform(node.getScreenCTM().inverse());\r\n            return [point.x, point.y];\r\n        }\r\n\r\n        var rect = node.getBoundingClientRect();\r\n        return [\r\n            event.clientX - rect.left - node.clientLeft,\r\n            event.clientY - rect.top - node.clientTop,\r\n        ];\r\n    }\r\n</script>\r\n\r\n<div id=\"line-chart-div\">\r\n    {#if data.length > 0}\r\n        <h1 class=\"title\">Projection of Nurse Workforce, Supply - Demand</h1>\r\n        <h2 class=\"subtitle\">North Carolina, {xExtent[0]} - {xExtent[1]}</h2>\r\n        <svg id=\"line-chart-svg\" viewBox=\"0 0 {width} {height}\">\r\n            <g class=\"chart-container\">\r\n                <!-- <rect\r\n            width={width - margin.right - x(projectionStartYear - 1)}\r\n            x={x(projectionStartYear - 1)}\r\n            y={margin.top}\r\n            height={height - margin.bottom - margin.top}\r\n            fill=\"#ececec\"\r\n          />\r\n          <text\r\n            class=\"is-size-5\"\r\n            transform=\"translate({x(projectionStartYear - 1)},{margin.top - 10})\"\r\n          >\r\n            Projected\r\n          </text> -->\r\n                <LineLegend\r\n                    {dashArray}\r\n                    {strokeWidth}\r\n                    transform=\"translate({width - 285},{margin.top - 10})\"\r\n                />\r\n                <g\r\n                    class=\"xAxis is-size-6\"\r\n                    transform=\"translate(0,{height - margin.bottom})\"\r\n                >\r\n                    {#each xTicks as tick (tick)}\r\n                        <XTick\r\n                            position={[x(tick), 0]}\r\n                            value={tick}\r\n                            duration={transitionDuration}\r\n                        />\r\n                    {/each}\r\n                </g>\r\n                <g\r\n                    class=\"yAxis is-size-6\"\r\n                    transform=\"translate({margin.left},0)\"\r\n                >\r\n                    {#each yTicks as tick (tick)}\r\n                        <YTick\r\n                            {y}\r\n                            value={tick}\r\n                            duration={transitionDuration}\r\n                            chartWidth={width - margin.right - margin.left}\r\n                        />\r\n                    {/each}\r\n                </g>\r\n                {#each data as lineElement (lineElement.id)}\r\n                    <Line\r\n                        linePath={line(\r\n                            lineElement.values.map(({ year, supplyMean }) => ({\r\n                                year,\r\n                                value: supplyMean,\r\n                            }))\r\n                        )}\r\n                        color={colorMap.get(lineElement.id)}\r\n                        duration={transitionDuration}\r\n                        {strokeWidth}\r\n                        areaPath={area(lineElement.values)}\r\n                        areaOpacity={0.2}\r\n                    />\r\n                    <Line\r\n                        linePath={line(\r\n                            lineElement.values.map(({ year, demandMean }) => ({\r\n                                year,\r\n                                value: demandMean,\r\n                            }))\r\n                        )}\r\n                        {dashArray}\r\n                        color={colorMap.get(lineElement.id)}\r\n                        duration={transitionDuration}\r\n                        {strokeWidth}\r\n                    />\r\n\r\n                    <!-- <path\r\n                        fill={colorMap.get(lineElement.id)}\r\n                        opacity=\"0.2\"\r\n                        d={area(lineElement.values)}\r\n                    /> -->\r\n                {/each}\r\n                <text\r\n                    class=\"is-size-5\"\r\n                    transform=\"translate({margin.left - 70},{height /\r\n                        1.5}) rotate(270)\"\r\n                >\r\n                    Nurse FTE or Head Count\r\n                </text>\r\n                <text\r\n                    class=\"is-size-5\"\r\n                    text-anchor=\"middle\"\r\n                    transform=\"translate({(width - margin.left - margin.right) /\r\n                        2 +\r\n                        margin.left},{height - 10})\"\r\n                >\r\n                    Year\r\n                </text>\r\n\r\n                {#if hoverData && data.length > 0}\r\n                    <line\r\n                        x1={x(hoverData.year)}\r\n                        x2={x(hoverData.year)}\r\n                        y1={margin.top}\r\n                        y2={height - margin.bottom}\r\n                        stroke=\"#333\"\r\n                        stroke-width=\"2\"\r\n                    />\r\n                    {#each hoverData.values as row}\r\n                        <g\r\n                            transform=\"translate({x(hoverData.year)} {y(\r\n                                row.demandMean\r\n                            )})\"\r\n                        >\r\n                            <circle\r\n                                cx=\"0\"\r\n                                cy=\"0\"\r\n                                r=\"5\"\r\n                                stroke=\"#333\"\r\n                                fill=\"none\"\r\n                            />\r\n                        </g>\r\n                        <g\r\n                            transform=\"translate({x(hoverData.year)} {y(\r\n                                row.supplyMean\r\n                            )})\"\r\n                        >\r\n                            <circle\r\n                                cx=\"0\"\r\n                                cy=\"0\"\r\n                                r=\"5\"\r\n                                stroke=\"#333\"\r\n                                fill=\"none\"\r\n                            />\r\n                        </g>\r\n                    {/each}\r\n                {/if}\r\n                <rect\r\n                    {width}\r\n                    {height}\r\n                    fill=\"none\"\r\n                    on:mousemove={handleHover}\r\n                    on:mouseleave={handleMouseLeave}\r\n                    style=\"pointer-events:all;\"\r\n                />\r\n            </g>\r\n        </svg>\r\n        {#if hoverData}\r\n            <div\r\n                class=\"tooltip\"\r\n                style=\"position:fixed; top:{lineChartPosition.clientY}px; left:{hoverData.year <\r\n                xHalfway\r\n                    ? lineChartPosition.left +\r\n                      lineChartPosition.scaling * x(hoverData.year) +\r\n                      4\r\n                    : lineChartPosition.left +\r\n                      lineChartPosition.scaling * x(hoverData.year) -\r\n                      324}px;\r\n          background: rgba(255, 255, 255, 0.9); border-radius:5px;border: 1px\r\n          solid #333333;padding:3px\r\n          3px;z-index:200;font-weight:600;width:320px;pointer-events:none;\"\r\n            >\r\n                <DifferenceToolTipTable rows={hoverData.values} />\r\n            </div>\r\n        {/if}\r\n    {:else}\r\n        <div class=\"notification\">Select model options and click \"Show\".</div>\r\n    {/if}\r\n    <LineChartLegendTable\r\n        on:deleteProjection\r\n        legendData={data.map((d, i) => ({\r\n            params: d.params,\r\n            color: colorMap.get(d.id),\r\n            id: d.id,\r\n        }))}\r\n    />\r\n</div>\r\n\r\n<style>\r\n    .xAxis {\r\n        text-anchor: middle;\r\n    }\r\n\r\n    .yAxis {\r\n        text-anchor: end;\r\n    }\r\n\r\n    text {\r\n        /* has-text-grey-dark */\r\n        fill: hsl(0, 0%, 29%);\r\n    }\r\n</style>\r\n",
    "<script>\r\n  export let dashArray = \"\";\r\n  export let strokeWidth;\r\n  export let transform;\r\n</script>\r\n\r\n<style>\r\n  text {\r\n    /* has-text-grey-dark */\r\n    fill: hsl(0, 0%, 29%);\r\n  }\r\n</style>\r\n\r\n<g {transform}>\r\n  <g>\r\n    <text class=\"is-size-5\">Supply</text>\r\n    <line\r\n      x1=\"-75\"\r\n      stroke-width={strokeWidth}\r\n      x2=\"-5\"\r\n      y1=\"-7\"\r\n      y2=\"-7\"\r\n      stroke=\"black\" />\r\n  </g>\r\n  <g transform=\"translate(150)\">\r\n    <text class=\"is-size-5\">Demand</text>\r\n    <line\r\n      x1=\"-75\"\r\n      stroke-dasharray={dashArray}\r\n      stroke-width={strokeWidth}\r\n      x2=\"-5\"\r\n      y1=\"-7\"\r\n      y2=\"-7\"\r\n      stroke=\"black\" />\r\n  </g>\r\n</g>\r\n",
    "<script>\r\n  import {\r\n    group,\r\n    groups,\r\n    extent,\r\n    ascending,\r\n    least,\r\n    max,\r\n    min,\r\n    permute,\r\n    mean,\r\n  } from \"d3-array\";\r\n  import options from \"./data/options.js\";\r\n  import { fontColor, throttle, numberFormat } from \"./utilities.js\";\r\n  import \"array-flat-polyfill\";\r\n  import { onMount, onDestroy, createEventDispatcher } from \"svelte\";\r\n\r\n  const dispatch = createEventDispatcher();\r\n\r\n  const locationNamesMap = new Map(\r\n    options.get(\"location\").options.map((d) => [d.value, d.label])\r\n  );\r\n  const numberPerPage = 10;\r\n\r\n  export let data;\r\n  // export let projectionStartYear;\r\n  export let showTitle = true;\r\n  export let currentYear;\r\n  export let baseYearOrder;\r\n  export let hovered;\r\n  export let hoveredColor;\r\n  export let colorScale = (d) => \"#fff\";\r\n  export let valueFormat = (d) => d.toLocaleFormat();\r\n\r\n  let leftCoord = 0;\r\n\r\n  $: frozenWidth =\r\n    params[\"locationType\"] == \"Medicaid Region\" ? \"13.5em\" : \"8em\";\r\n\r\n  let currentPage = 0;\r\n  //Reset counter when data changes\r\n  $: if (data) {\r\n    currentPage = 0;\r\n  }\r\n\r\n  //Why do Chrome and Edge appear to add a space after the locationType?\r\n  $: params = data.params\r\n    ? data.params.reduce((acc, curr) => {\r\n        acc[curr[0]] = options\r\n          .get(curr[0])\r\n          .options.find((d) => d.value == curr[1]).label;\r\n        return acc;\r\n      }, {})\r\n    : {};\r\n\r\n  $: paramsMap = data.params\r\n    ? new Map(data.params.map((d) => [d.name, d]))\r\n    : undefined;\r\n\r\n  //This needs to get cleaned up.\r\n  $: currentNumberFormat = function (d) {\r\n    if (data.params.find((d) => d[0] == \"calculation\")[1] === \"percentage\") {\r\n      return valueFormat(d);\r\n    } else {\r\n      return numberFormat(+data.params.find((d) => d[0] == \"rateOrTotal\")[1])(\r\n        d\r\n      );\r\n    }\r\n  };\r\n\r\n  //Create Map for ordering based on baseYearOrder\r\n  $: groupedMap = group(data.values, (d) => d.location);\r\n\r\n  $: grouped = baseYearOrder\r\n    .map((d) => groupedMap.get(d))\r\n    .map(function (d) {\r\n      return [\r\n        locationNamesMap.get(d[0].location),\r\n        d.sort((a, b) => ascending(a.year, b.year)),\r\n      ];\r\n    });\r\n\r\n  $: calculateBackgroundColor = (index, cell) => {\r\n    return cell.year != currentYear\r\n      ? \"#ffffff\"\r\n      : hovered == cell.location\r\n      ? hoveredColor\r\n      : colorScale(cell.value);\r\n  };\r\n\r\n  $: numOfPages = Math.ceil(grouped.length / numberPerPage);\r\n  $: paged = group(grouped, (d, i) => Math.floor(i / numberPerPage));\r\n  $: currentRows = paged.get(currentPage);\r\n\r\n  $: if (currentYear) {\r\n    const currentEl = document.getElementById(`header-${currentYear}`);\r\n    if (currentEl)\r\n      currentEl.scrollIntoView({ behavior: \"smooth\", block: \"nearest\" });\r\n  }\r\n\r\n  function jumpToPage(e) {\r\n    currentPage = +e.target.innerText - 1;\r\n  }\r\n\r\n  function calculatePosition() {\r\n    const { left: containerLeft } = document\r\n      .getElementById(\"main-container\")\r\n      .getBoundingClientRect();\r\n    const { left: tableLeft } = document\r\n      .getElementById(\"top-level-table-div\")\r\n      .getBoundingClientRect();\r\n\r\n    leftCoord = tableLeft - containerLeft;\r\n  }\r\n\r\n  function handleLocationHover(id) {\r\n    dispatch(\"locationHover\", id);\r\n  }\r\n  function handleLocationLeave(id) {\r\n    dispatch(\"locationLeave\");\r\n  }\r\n\r\n  onMount(() => {\r\n    calculatePosition();\r\n    window.onresize = throttle(calculatePosition, 100);\r\n\r\n    //Initial scroll into view for default year\r\n    const currentEl = document.getElementById(`header-${currentYear}`);\r\n    if (currentEl) currentEl.scrollIntoView({ block: \"nearest\" });\r\n  });\r\n\r\n  onDestroy(() => {\r\n    window.onresize = null;\r\n  });\r\n</script>\r\n\r\n{#if data.values}\r\n  <div id=\"top-level-table-div\">\r\n    {#if showTitle}\r\n      <h1 class=\"title is-4\">\r\n        {params[\"type\"]}s by {params[\"locationType\"].trim()}, North Carolina\r\n      </h1>\r\n      <h2 class=\"subtitle is-6\">\r\n        {permute(params, [\r\n          ...data.params\r\n            .filter((d) => d[0].includes(\"Scenario\"))\r\n            .map((d) => d[0]),\r\n          \"setting\",\r\n          \"education\",\r\n          \"fteOrHeadcount\",\r\n          \"rateOrTotal\",\r\n          \"calculation\",\r\n        ]).join(\", \")}\r\n      </h2>\r\n    {/if}\r\n\r\n    <div\r\n      class=\"table-container\"\r\n      id=\"wrapper\"\r\n      style=\"margin-left:{frozenWidth};\"\r\n    >\r\n      <table class=\"table is-narrow\">\r\n        <thead>\r\n          <tr>\r\n            <th\r\n              class=\" frozen projection-header\"\r\n              style=\"width:{frozenWidth};\"\r\n            />\r\n            <!-- {#each grouped[0][1] as year}\r\n              <th class=\"projection-header\" style=\"padding:0;\">\r\n                {year.year == projectionStartYear ? 'Projected' : ''}\r\n              </th>\r\n            {/each} -->\r\n          </tr>\r\n          <tr>\r\n            <th\r\n              class=\"frozen\"\r\n              style=\"left:{leftCoord}px;padding-bottom:5px;width:{frozenWidth};\"\r\n            >\r\n              {params[\"locationType\"]}\r\n            </th>\r\n            {#each grouped[0][1] as year}\r\n              <th id=\"header-{year.year}\">\r\n                {year.year}\r\n              </th>\r\n            {/each}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {#each currentRows as row, index}\r\n            <tr>\r\n              <!-- This padding adjustment (along with the one in the thead) are to correct for some mysterious\r\n            misalignment of the borders for the first two elements in the first column. -->\r\n              <td\r\n                class=\"frozen\"\r\n                style=\"width:{frozenWidth};left:{leftCoord}px;{index == 0\r\n                  ? `padding-bottom:5px;`\r\n                  : ''}\"\r\n              >\r\n                {row[0]}\r\n              </td>\r\n              {#each row[1] as cell, index}\r\n                <td\r\n                  class=\"number-cell\"\r\n                  style=\"background-color:{calculateBackgroundColor(\r\n                    index,\r\n                    cell\r\n                  )};\r\n                  color:{fontColor(calculateBackgroundColor(index, cell))};\"\r\n                  on:mouseenter={() => handleLocationHover(cell.location)}\r\n                  on:mouseleave={handleLocationLeave}\r\n                >\r\n                  {currentNumberFormat(cell.value)}\r\n                </td>\r\n              {/each}\r\n            </tr>\r\n          {/each}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    {#if numOfPages > 1}\r\n      <nav class=\"pagination\" role=\"navigation\" aria-label=\"pagination\">\r\n        <ul class=\"pagination-list\">\r\n          {#each Array.from({ length: numOfPages }, (_, i) => i + 1) as pageNum}\r\n            <li>\r\n              <button\r\n                class=\"pagination-link {currentPage + 1 == pageNum\r\n                  ? 'is-current'\r\n                  : ''}\"\r\n                on:click={jumpToPage}\r\n                aria-label=\"Goto page {pageNum}\"\r\n              >\r\n                {pageNum}\r\n              </button>\r\n            </li>\r\n          {/each}\r\n        </ul>\r\n      </nav>\r\n    {/if}\r\n  </div>\r\n{:else}\r\n  <div class=\"notification\">\r\n    Choose a combination of selections and click \"Show\" to see a table of the\r\n    model's projections.\r\n  </div>\r\n{/if}\r\n\r\n<style>\r\n  #wrapper {\r\n    overflow-x: scroll;\r\n    /* margin-left: 10em; */\r\n    overflow-y: visible;\r\n    padding: 0;\r\n  }\r\n\r\n  .frozen {\r\n    white-space: nowrap;\r\n    position: absolute;\r\n    /* width: 10em; */\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n\r\n  .projection {\r\n    border-top: 3px;\r\n    border-top-color: #6c7480;\r\n    border-top-style: solid;\r\n  }\r\n\r\n  .projection-header {\r\n    border-bottom-style: none;\r\n    font-size: 0.6em;\r\n  }\r\n\r\n  .number-cell {\r\n    text-align: right;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import { scaleLinear, scaleBand } from \"d3-scale\";\r\n  import { color } from \"d3-color\";\r\n  import { format } from \"d3-format\";\r\n  import { createEventDispatcher } from \"svelte\";\r\n\r\n  const dispatch = createEventDispatcher();\r\n\r\n  export let mapYearDataArray;\r\n  export let valueExtentAllTime;\r\n  export let locationType;\r\n  export let hovered;\r\n  export let hoveredColor;\r\n  export let rateOrTotal;\r\n  export let calculation;\r\n\r\n  $: margin = {\r\n    top: 30,\r\n    right: 10,\r\n    bottom: 10,\r\n    left: locationType == \"Medicaid Region\" ? 155 : 110,\r\n  };\r\n  const width = 320;\r\n  $: height = mapYearDataArray.length * 20 + margin.top + margin.bottom;\r\n\r\n  $: xDomain = valueExtentAllTime.map(\r\n    (d, i) => (i == 0 && d > 0 ? 0 : d) //Always make baseline at least 0\r\n  );\r\n\r\n  $: x = scaleLinear()\r\n    .domain(xDomain)\r\n    .range([margin.left, width - margin.right]);\r\n\r\n  $: y = scaleBand()\r\n    .domain(mapYearDataArray.map((d) => d[0]))\r\n    .range([margin.top, height - margin.bottom])\r\n    .paddingInner(0.1);\r\n\r\n  export let tickFormat = (t) => t.toLocaleString();\r\n\r\n  function handleLocationHover(id) {\r\n    dispatch(\"locationHover\", id);\r\n  }\r\n  function handleLocationLeave(id) {\r\n    dispatch(\"locationLeave\");\r\n  }\r\n</script>\r\n\r\n<svg id=\"row-chart-svg\" viewBox=\"0 0 {width} {height}\">\r\n  <g>\r\n    <text\r\n      class=\"anchor-middle\"\r\n      transform=\"translate({margin.left +\r\n        (width - margin.left - margin.right) / 2}\r\n      10)\"\r\n    >\r\n      {calculation === \"percentage\"\r\n        ? \"Percentage Shortage/Surplus\"\r\n        : rateOrTotal}\r\n    </text>\r\n\r\n    <g>\r\n      {#each mapYearDataArray as bar}\r\n        <g transform=\"translate(0 {y(bar[0])})\">\r\n          <rect\r\n            width={Math.abs(x(bar[1].value) - x(0)) || 1}\r\n            x={x(Math.min(bar[1].value, 0))}\r\n            height={y.bandwidth()}\r\n            fill={hovered == bar[0] ? hoveredColor : bar[1].fill}\r\n            stroke-width=\"1\"\r\n            stroke={color(\r\n              hovered == bar[0] ? hoveredColor : bar[1].fill\r\n            ).darker(2)}\r\n            on:mouseenter={() => handleLocationHover(bar[0])}\r\n            on:mouseleave={handleLocationLeave}\r\n          >\r\n            <title>{bar[1].name}: {bar[1].value}</title>\r\n          </rect>\r\n          <text\r\n            class=\"yAxis\"\r\n            transform=\"translate({margin.left})\"\r\n            dy=\"1em\"\r\n            dx=\"-3\"\r\n          >\r\n            {bar[1].name}\r\n          </text>\r\n        </g>\r\n      {/each}\r\n      <g transform=\"translate(0 {margin.top})\">\r\n        {#each x.ticks(5) as tick}\r\n          <g transform=\"translate({x(tick)} 0)\">\r\n            <line y1=\"0\" y2={height} stroke={tick === 0 ? \"\" : \"#fff\"} />\r\n            <text class=\"anchor-middle\" dy=\"-5\">{tickFormat(tick)}</text>\r\n          </g>\r\n        {/each}\r\n      </g>\r\n    </g>\r\n  </g>\r\n</svg>\r\n\r\n<style>\r\n  .yAxis {\r\n    text-anchor: end;\r\n  }\r\n\r\n  .anchor-middle {\r\n    text-anchor: middle;\r\n  }\r\n\r\n  svg text {\r\n    font-size: 0.75rem;\r\n    fill: #363636;\r\n  }\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AA+DI,KAAK,cAAC,CAAC,AACH,UAAU,CAAE,UAAU,CAAC,IAAI,AAC/B,CAAC,AAED,mBAAK,MAAM,AAAC,CAAC,AACT,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC3C,OAAO,CAAE,GAAG,AAChB,CAAC,AAED,mBAAK,MAAM,AAAC,CAAC,AACT,aAAa,CAAE,GAAG,CAClB,aAAa,CAAE,MAAM,CACrB,aAAa,CAAE,OAAO,AAC1B,CAAC;AC9BH,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,KAAK,AACnB,CAAC;AC8BD,kBAAkB,cAAC,CAAC,AAClB,OAAO,CAAE,WAAW,AACtB,CAAC,AAED,qBAAO,MAAM,AAAC,CAAC,AACb,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,OAAO,cAAC,CAAC,AACP,IAAI,CAAE,GAAG,CACT,KAAK,CAAE,KAAK,CACZ,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,GAAG,AACd,CAAC,AAED,SAAS,cAAC,CAAC,AACT,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AAED,eAAe,cAAC,CAAC,AACf,IAAI,CAAE,OAAO,AACf,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAC1C,OAAO,CAAE,GAAG,AACd,CAAC;ACSD,GAAG,eAAC,CAAC,AACH,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,GAAG,eAAC,CAAC,AACH,UAAU,CAAE,KAAK,AACnB,CAAC;ACwMD,MAAM,cAAC,CAAC,AACN,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,IAAI,cAAC,CAAC,AAEJ,IAAI,CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,AACvB,CAAC;AC6BC,MAAM,cAAC,CAAC,AACJ,WAAW,CAAE,MAAM,AACvB,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,WAAW,CAAE,GAAG,AACpB,CAAC,AAED,IAAI,cAAC,CAAC,AAEF,IAAI,CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,AACzB,CAAC;AC9WH,IAAI,cAAC,CAAC,AAEJ,IAAI,CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,AACvB,CAAC;AC8OD,QAAQ,cAAC,CAAC,AACR,UAAU,CAAE,MAAM,CAElB,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,OAAO,cAAC,CAAC,AACP,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,QAAQ,CAElB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,AACzB,CAAC,AAQD,kBAAkB,cAAC,CAAC,AAClB,mBAAmB,CAAE,IAAI,CACzB,SAAS,CAAE,KAAK,AAClB,CAAC,AAED,YAAY,cAAC,CAAC,AACZ,UAAU,CAAE,KAAK,AACnB,CAAC;AC/KD,MAAM,8BAAC,CAAC,AACN,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,cAAc,8BAAC,CAAC,AACd,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,kBAAG,CAAC,IAAI,eAAC,CAAC,AACR,SAAS,CAAE,OAAO,CAClB,IAAI,CAAE,OAAO,AACf,CAAC"
}